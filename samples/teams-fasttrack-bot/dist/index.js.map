{"version":3,"file":"index.js","sources":["../src/config/logging.ts","../src/config/storage.ts","../src/config/connector.ts","../src/config/middleware.ts","../src/bot.ts","../src/index.ts"],"sourcesContent":["import { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { UniversalBot, IEvent } from \"botbuilder\";\r\n\r\nfunction botEventLogger(event: IEvent, next: Function): void {\r\n\r\n    Logger.log({\r\n        data: event,\r\n        level: LogLevel.Verbose,\r\n        message: `User '${event.user}' event of type ${event.type}. Address: ${event.address} ReplyToId: ${event.replyToId}`,\r\n    });\r\n    next();\r\n}\r\n\r\nexport function applyLogging(bot: UniversalBot): UniversalBot {\r\n\r\n    bot.use({\r\n        receive: botEventLogger,\r\n        send: botEventLogger,\r\n    });\r\n\r\n    Logger.write(\"Added request logging\", LogLevel.Info);\r\n\r\n    return bot;\r\n}\r\n","import { UniversalBot, MemoryBotStorage } from \"botbuilder\";\r\nimport { AzureTableClient, AzureBotStorage } from \"botbuilder-azure\";\r\nimport { LogLevel, Logger } from \"@pnp/logging\";\r\n\r\nexport function applyStorage(bot: UniversalBot): UniversalBot {\r\n\r\n    if (process.env.TeamsBot_StateStoreTableName) {\r\n        return applyTableStorage(bot);\r\n    }\r\n\r\n    return applyMemoryStorage(bot);\r\n}\r\n\r\nfunction applyTableStorage(bot: UniversalBot): UniversalBot {\r\n\r\n    const tableName = process.env.TeamsBot_StateStoreTableName || \"BotState\";\r\n    const azureTableClient = new AzureTableClient(tableName, \"UseDevelopmentStorage=true\");\r\n    const tableStorage = new AzureBotStorage({ gzipData: false }, azureTableClient);\r\n    bot.set(\"storage\", tableStorage);\r\n\r\n    Logger.write(\"Added table storage\", LogLevel.Info);\r\n\r\n    return bot;\r\n}\r\n\r\n// this can be used for testing\r\nfunction applyMemoryStorage(bot: UniversalBot): UniversalBot {\r\n    bot.set(\"storage\", new MemoryBotStorage());\r\n    return bot;\r\n}\r\n\r\n","import { IConnector, ConsoleConnector } from \"botbuilder\";\r\nimport { TeamsChatConnector } from \"botbuilder-teams\";\r\nimport { createServer } from \"restify\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport function connectorFactory(): IConnector {\r\n\r\n    if (process.env.TeamsBot_ConsoleConnectorFlag) {\r\n        return consoleConnector();\r\n    }\r\n\r\n    return teamsConnector();\r\n}\r\n\r\nfunction teamsConnector(): TeamsChatConnector {\r\n\r\n    Logger.write(\"Entering teamsConnector()\", LogLevel.Verbose);\r\n\r\n    // create connector\r\n    const connector = new TeamsChatConnector({\r\n        appId: process.env.MicrosoftAppId,\r\n        appPassword: process.env.MicrosoftAppPassword,\r\n    });\r\n\r\n    Logger.write(\"teamsConnector() :: Created connector\", LogLevel.Verbose);\r\n\r\n    // Setup Restify Server\r\n    const server = createServer();\r\n    server.listen(process.env.port || 3978, function () {\r\n        console.log(`${server.name} listening to ${server.url}`);\r\n    });\r\n\r\n    Logger.write(\"teamsConnector() :: Created server\", LogLevel.Verbose);\r\n\r\n    server.post(\"/api/messages\", connector.listen());\r\n\r\n    Logger.write(\"teamsConnector() :: Connector listening to server\", LogLevel.Verbose);\r\n\r\n    Logger.write(\"Leaving teamsConnector()\", LogLevel.Info);\r\n\r\n    return connector;\r\n}\r\n\r\nfunction consoleConnector(): ConsoleConnector {\r\n\r\n    return new ConsoleConnector().listen();\r\n}\r\n","import { UniversalBot, Middleware } from \"botbuilder\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport function applyMiddleware(bot: UniversalBot): UniversalBot {\r\n    // setup middleware for dialogs\r\n    bot.use(Middleware.dialogVersion({ version: 0.2, resetCommand: /^reset/i }));\r\n\r\n    Logger.write(\"Added middleware\", LogLevel.Info);\r\n\r\n    return bot;\r\n}\r\n","\r\nimport { UniversalBot } from \"botbuilder\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { applyLogging } from \"./config/logging\";\r\nimport { applyStorage } from \"./config/storage\";\r\nimport { connectorFactory } from \"./config/connector\";\r\nimport { applyMiddleware } from \"./config/middleware\";\r\nimport { BotSetupDelegate, BotUsageDelegate } from \"./types\";\r\n\r\n// promise used to setup the bot\r\nlet _botPromise: Promise<UniversalBot> | null = null;\r\n\r\nconst defaultBotConfiguration: BotSetupDelegate[] = [\r\n    applyLogging,\r\n    applyStorage,\r\n    applyMiddleware,\r\n];\r\n\r\nexport function getBot(configuration = defaultBotConfiguration): Promise<UniversalBot> {\r\n\r\n    Logger.write(\"Entering getBot()\", LogLevel.Verbose);\r\n\r\n    if (_botPromise === null) {\r\n\r\n        Logger.write(\"getBot() :: Bot promise is null, creating new\", LogLevel.Verbose);\r\n\r\n        _botPromise = new Promise((resolve) => {\r\n\r\n            Logger.write(\"getBot() :: Creating a new bot instance and resolving\", LogLevel.Info);\r\n\r\n            resolve(configuration.reduce((b, f) => f(b), new UniversalBot(connectorFactory())));\r\n        });\r\n    }\r\n\r\n    Logger.write(\"getBot() :: Returning bot promise\", LogLevel.Verbose);\r\n\r\n    return _botPromise;\r\n}\r\n\r\nexport function usingBot(func: BotUsageDelegate): void {\r\n\r\n    getBot().then(b => func(b));\r\n}\r\n","import { usingBot } from \"./bot\";\r\nimport { Session, IPromptResult, IFindMatchResult, Prompts } from \"botbuilder\";\r\nimport { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\";\r\n\r\nLogger.activeLogLevel = LogLevel.Verbose;\r\nLogger.subscribe(new ConsoleListener());\r\nLogger.write(\"Starting bot...\", LogLevel.Verbose);\r\n\r\nusingBot(bot => {\r\n\r\n    Logger.write(\"Bot started...\", LogLevel.Verbose);\r\n\r\n    // Entry point of the bot\r\n    bot.dialog(\"/\", [\r\n        (session) => {\r\n            session.replaceDialog(\"/promptButtons\");\r\n        },\r\n    ]);\r\n\r\n    bot.dialog(\"/promptButtons\", [\r\n        (session: Session) => {\r\n            Logger.write(\"init() :: /promptButtons\", LogLevel.Verbose);\r\n            const choices = [\"Musician Explorer\", \"Musician Search\"];\r\n            Prompts.choice(session, \"How would you like to explore the classical music bot?\", choices);\r\n        },\r\n        (session: Session, results: IPromptResult<IFindMatchResult>) => {\r\n            if (results.response) {\r\n                const selection = results.response.entity;\r\n                // route to corresponding dialogs\r\n                switch (selection) {\r\n                    case \"Musician Explorer\":\r\n                        session.replaceDialog(\"/musicianExplorer\");\r\n                        break;\r\n                    case \"Musician Search\":\r\n                        session.replaceDialog(\"/musicianSearch\");\r\n                        break;\r\n                    default:\r\n                        session.reset(\"/\");\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n    ]);\r\n});\r\n\r\n"],"names":["Logger","AzureTableClient","AzureBotStorage","MemoryBotStorage","TeamsChatConnector","createServer","ConsoleConnector","Middleware","UniversalBot","ConsoleListener","Prompts"],"mappings":"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"}