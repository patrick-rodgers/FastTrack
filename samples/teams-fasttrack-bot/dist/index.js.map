{"version":3,"file":"index.js","sources":["../src/bot.ts","../src/index.ts"],"sourcesContent":["\r\nimport {\r\n    UniversalBot,\r\n    MemoryBotStorage,\r\n    Middleware,\r\n} from \"botbuilder\";\r\n\r\nimport {\r\n    TeamsChatConnector,\r\n} from \"botbuilder-teams\";\r\n\r\nimport {\r\n    createServer,\r\n} from \"restify\";\r\n\r\nimport {\r\n    Logger,\r\n    LogLevel,\r\n} from \"@pnp/logging\";\r\n\r\nlet _botPromise: Promise<UniversalBot> | null = null;\r\n\r\nexport type BotDelegate = (b: UniversalBot) => void;\r\n\r\nfunction getBot(): Promise<UniversalBot> {\r\n\r\n    Logger.write(\"Entering getBot()\", LogLevel.Verbose);\r\n\r\n    if (_botPromise === null) {\r\n\r\n        Logger.write(\"getBot() :: Bot promise is null, returning.\", LogLevel.Verbose);\r\n\r\n        _botPromise = new Promise((resolve) => {\r\n\r\n            const connector = new TeamsChatConnector({\r\n                appId: process.env.MicrosoftAppId,\r\n                appPassword: process.env.MicrosoftAppPassword,\r\n            });\r\n\r\n            const bot = new UniversalBot(connector);\r\n\r\n            // TODO:: testing??\r\n            bot.set(\"storage\", new MemoryBotStorage());\r\n\r\n            // Setup Restify Server\r\n            const server = createServer();\r\n            server.listen(process.env.port || 3978, function () {\r\n                console.log(`${server.name} listening to ${server.url}`);\r\n            });\r\n            server.post(\"/api/messages\", connector.listen());\r\n\r\n            bot.use(Middleware.dialogVersion({ version: 0.2, resetCommand: /^reset/i }));\r\n\r\n            Logger.write(\"getBot() :: Created new bot instance.\", LogLevel.Info);\r\n\r\n            resolve(bot);\r\n        });\r\n    }\r\n\r\n    Logger.write(\"getBot() :: Returning bot promise\", LogLevel.Verbose);\r\n\r\n    return _botPromise;\r\n}\r\n\r\nexport function usingBot(func: BotDelegate): void {\r\n\r\n    getBot().then(b => func(b));\r\n}\r\n","import { usingBot } from \"./bot\";\r\nimport { Session, IPromptResult, IFindMatchResult, Prompts } from \"botbuilder\";\r\n\r\nimport {\r\n    Logger,\r\n    ConsoleListener,\r\n    LogLevel,\r\n} from \"@pnp/logging\";\r\n\r\nLogger.activeLogLevel = LogLevel.Verbose;\r\nLogger.subscribe(new ConsoleListener());\r\n\r\nLogger.write(\"Entering init()\", LogLevel.Verbose);\r\n\r\nusingBot(bot => {\r\n\r\n    Logger.write(\"init() :: Entering usingBot call\", LogLevel.Verbose);\r\n\r\n    // Entry point of the bot\r\n    bot.dialog(\"/\", [\r\n        (session) => {\r\n            Logger.write(\"init() :: /\", LogLevel.Verbose);\r\n            session.replaceDialog(\"/promptButtons\");\r\n        },\r\n    ]);\r\n\r\n    bot.dialog(\"/promptButtons\", [\r\n        (session: Session) => {\r\n            Logger.write(\"init() :: /promptButtons\", LogLevel.Verbose);\r\n            const choices = [\"Musician Explorer\", \"Musician Search\"];\r\n            Prompts.choice(session, \"How would you like to explore the classical music bot?\", choices);\r\n        },\r\n        (session: Session, results: IPromptResult<IFindMatchResult>) => {\r\n            if (results.response) {\r\n                const selection = results.response.entity;\r\n                // route to corresponding dialogs\r\n                switch (selection) {\r\n                    case \"Musician Explorer\":\r\n                        session.replaceDialog(\"/musicianExplorer\");\r\n                        break;\r\n                    case \"Musician Search\":\r\n                        session.replaceDialog(\"/musicianSearch\");\r\n                        break;\r\n                    default:\r\n                        session.reset(\"/\");\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n    ]);\r\n});\r\n\r\n"],"names":["Logger","TeamsChatConnector","UniversalBot","MemoryBotStorage","createServer","Middleware","ConsoleListener","Prompts"],"mappings":"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"}