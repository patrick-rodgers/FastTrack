{"version":3,"file":"bot.js","sourceRoot":"","sources":["../src/bot.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAY,MAAM,cAAc,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAGtD,gCAAgC;AAChC,IAAI,WAAW,GAAiC,IAAI,CAAC;AAErD,MAAM,uBAAuB,GAAuB;IAChD,YAAY;IACZ,YAAY;IACZ,eAAe;CAClB,CAAC;AAEF,MAAM,iBAAiB,aAAa,GAAG,uBAAuB;IAE1D,MAAM,CAAC,KAAK,CAAC,mBAAmB,kBAAmB,CAAC;IAEpD,IAAI,WAAW,KAAK,IAAI,EAAE;QAEtB,MAAM,CAAC,KAAK,CAAC,+CAA+C,kBAAmB,CAAC;QAEhF,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAElC,MAAM,CAAC,KAAK,CAAC,uDAAuD,eAAgB,CAAC;YAErF,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,YAAY,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;KACN;IAED,MAAM,CAAC,KAAK,CAAC,mCAAmC,kBAAmB,CAAC;IAEpE,OAAO,WAAW,CAAC;AACvB,CAAC;AAED,MAAM,mBAAmB,IAAsB;IAE3C,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC","sourcesContent":["\r\nimport { UniversalBot } from \"botbuilder\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { applyLogging } from \"./config/logging\";\r\nimport { applyStorage } from \"./config/storage\";\r\nimport { connectorFactory } from \"./config/connector\";\r\nimport { applyMiddleware } from \"./config/middleware\";\r\nimport { BotSetupDelegate, BotUsageDelegate } from \"./types\";\r\n\r\n// promise used to setup the bot\r\nlet _botPromise: Promise<UniversalBot> | null = null;\r\n\r\nconst defaultBotConfiguration: BotSetupDelegate[] = [\r\n    applyLogging,\r\n    applyStorage,\r\n    applyMiddleware,\r\n];\r\n\r\nexport function getBot(configuration = defaultBotConfiguration): Promise<UniversalBot> {\r\n\r\n    Logger.write(\"Entering getBot()\", LogLevel.Verbose);\r\n\r\n    if (_botPromise === null) {\r\n\r\n        Logger.write(\"getBot() :: Bot promise is null, creating new\", LogLevel.Verbose);\r\n\r\n        _botPromise = new Promise((resolve) => {\r\n\r\n            Logger.write(\"getBot() :: Creating a new bot instance and resolving\", LogLevel.Info);\r\n\r\n            resolve(configuration.reduce((b, f) => f(b), new UniversalBot(connectorFactory())));\r\n        });\r\n    }\r\n\r\n    Logger.write(\"getBot() :: Returning bot promise\", LogLevel.Verbose);\r\n\r\n    return _botPromise;\r\n}\r\n\r\nexport function usingBot(func: BotUsageDelegate): void {\r\n\r\n    getBot().then(b => func(b));\r\n}\r\n"]}